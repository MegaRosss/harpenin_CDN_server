
// Remove loader on page load
let loader = document.getElementsByClassName('loader')
let loaderbg = document.getElementById('loaderbg')

window.addEventListener('DOMContentLoaded', () => {
  function removeLoader() {
    loaderbg.classList.add('removed');
  }
  setTimeout(removeLoader, 1000);
})

// code for interactivity of modal action buttons

function showWaitlist() {
  const emailInput = document.querySelector('.input');
  const btn = document.querySelector('.waitlist-btn');

  emailInput.addEventListener('input', function () {
    const email = emailInput.value;
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; // regular expression to match email pattern
    if (emailRegex.test(email)) {
      btn.disabled = false;
      btn.innerHTML = `<svg class="hover" xmlns="http://www.w3.org/2000/svg" width="113" height="108" viewBox="0 0 113 108" fill="none">
      <circle cx="57.5" cy="42.5" r="42.5" fill="#EE9D24"/>
      <path d="M75.8118 54.1876H72.0618V50.4376C72.0618 50.2314 71.8931 50.0626 71.6868 50.0626H69.4368C69.2306 50.0626 69.0618 50.2314 69.0618 50.4376V54.1876H65.3118C65.1056 54.1876 64.9368 54.3564 64.9368 54.5626V56.8126C64.9368 57.0189 65.1056 57.1876 65.3118 57.1876H69.0618V60.9376C69.0618 61.1439 69.2306 61.3126 69.4368 61.3126H71.6868C71.8931 61.3126 72.0618 61.1439 72.0618 60.9376V57.1876H75.8118C76.0181 57.1876 76.1868 57.0189 76.1868 56.8126V54.5626C76.1868 54.3564 76.0181 54.1876 75.8118 54.1876ZM51.5071 41.3626C51.465 40.9548 51.4415 40.5423 51.4415 40.1251C51.4415 39.3798 51.5118 38.6532 51.6431 37.9454C51.6759 37.7767 51.5868 37.6032 51.4321 37.5329C50.7946 37.247 50.2087 36.8532 49.7025 36.3564C49.1059 35.778 48.6365 35.0816 48.3242 34.3116C48.0118 33.5416 47.8634 32.715 47.8884 31.8845C47.9306 30.3798 48.5353 28.9501 49.59 27.872C50.7478 26.6861 52.304 26.0392 53.9587 26.0579C55.454 26.072 56.8978 26.6486 57.99 27.6704C58.3603 28.0173 58.679 28.4017 58.9462 28.8142C59.04 28.9595 59.2228 29.0204 59.3821 28.9642C60.2071 28.6782 61.079 28.4767 61.9743 28.3829C62.2368 28.3548 62.3868 28.0736 62.2696 27.8392C60.7462 24.8251 57.6337 22.7439 54.0337 22.6876C48.84 22.6079 44.5087 26.8689 44.5087 32.0626C44.5087 35.0064 45.8634 37.6314 47.9868 39.3517C46.4962 40.0407 45.1228 40.9923 43.9321 42.1829C41.3634 44.747 39.9103 48.1314 39.8165 51.7454C39.8153 51.7955 39.824 51.8452 39.8423 51.8918C39.8606 51.9384 39.888 51.9809 39.923 52.0167C39.9579 52.0525 39.9997 52.081 40.0458 52.1004C40.0919 52.1198 40.1415 52.1298 40.1915 52.1298H42.8212C43.0228 52.1298 43.1915 51.9704 43.1962 51.7689C43.2853 49.0501 44.3868 46.5048 46.3228 44.5736C47.7009 43.1954 49.3884 42.2392 51.2306 41.7751C51.4087 41.7236 51.5306 41.5501 51.5071 41.3626ZM72.6243 40.1251C72.6243 34.997 68.504 30.8298 63.3946 30.7501C58.2009 30.6704 53.8743 34.9314 53.8743 40.1251C53.8743 43.0689 55.2337 45.6939 57.3525 47.4142C55.8464 48.1123 54.4754 49.0708 53.3025 50.2454C50.7337 52.8095 49.2806 56.1939 49.1868 59.8032C49.1856 59.8533 49.1944 59.903 49.2126 59.9496C49.2309 59.9962 49.2584 60.0387 49.2933 60.0745C49.3282 60.1103 49.37 60.1388 49.4161 60.1582C49.4623 60.1776 49.5118 60.1876 49.5618 60.1876H52.1868C52.3884 60.1876 52.5571 60.0282 52.5618 59.8267C52.6509 57.1079 53.7525 54.5626 55.6884 52.6314C57.7087 50.6111 60.39 49.5001 63.2493 49.5001C68.4243 49.5001 72.6243 45.3048 72.6243 40.1251ZM67.4915 44.3673C66.3571 45.5017 64.8525 46.1251 63.2493 46.1251C61.6462 46.1251 60.1415 45.5017 59.0071 44.3673C58.4411 43.8042 57.9938 43.1332 57.6919 42.394C57.3899 41.6548 57.2394 40.8626 57.2493 40.0642C57.2634 38.5267 57.8775 37.0407 58.9509 35.9392C60.0759 34.7861 61.5806 34.1439 63.1884 34.1251C64.7775 34.1111 66.3197 34.7298 67.454 35.8407C68.6165 36.9798 69.254 38.5032 69.254 40.1251C69.2493 41.7282 68.6259 43.2329 67.4915 44.3673Z" fill="white"/>
      <path d="M0.675781 64.7575L1.8728 64.23L2.20499 65.0478C2.49031 65.7285 2.99314 65.9457 3.71347 65.6994L9.66795 63.6627L10.1821 65.166L4.23939 67.1987C2.75175 67.7075 1.68934 67.2094 1.05215 65.7044L0.675781 64.7575Z" fill="#EE9D24"/>
      <path d="M6.38421 77.839C5.95633 77.1114 5.74138 76.3786 5.73936 75.6406C5.74153 74.9098 5.94341 74.2246 6.345 73.5853C6.75372 72.9417 7.35039 72.3892 8.13501 71.9278C8.92677 71.4621 9.69962 71.2092 10.4536 71.169C11.2075 71.1288 11.9008 71.2875 12.5335 71.645C13.1733 71.9984 13.7092 72.5424 14.1413 73.2771C14.5734 74.0118 14.7883 74.7445 14.7861 75.4754C14.7911 76.2021 14.5928 76.8851 14.1912 77.5245C13.7896 78.1639 13.1965 78.7143 12.4119 79.1757C11.6201 79.6413 10.8437 79.8963 10.0826 79.9407C9.32867 79.9809 8.6318 79.8244 7.992 79.471C7.35221 79.1177 6.81628 78.5737 6.38421 77.839ZM7.56114 77.1468C7.96805 77.8387 8.52371 78.2367 9.22814 78.3409C9.93257 78.445 10.7092 78.2474 11.558 77.7483C12.414 77.2449 12.9641 76.6622 13.2083 76.0001C13.4568 75.3452 13.3755 74.6682 12.9644 73.9692C12.5575 73.2773 12.0054 72.8772 11.3081 72.7689C10.6108 72.6606 9.83413 72.8581 8.97818 73.3615C8.12936 73.8607 7.57925 74.4434 7.32787 75.1096C7.07648 75.7759 7.15424 76.4549 7.56114 77.1468Z" fill="#EE9D24"/>
      <path d="M12.5204 86.2603L19.0618 80.4477L20.1172 81.6354L13.5757 87.4479L12.5204 86.2603Z" fill="#EE9D24"/>
      <path d="M18.4541 92.432L23.7464 85.4629L24.6953 86.1835L24.7485 93.8922L28.4419 89.0286L29.6182 89.9219L24.3259 96.891L23.3868 96.1779L23.3388 88.442L19.6304 93.3253L18.4541 92.432Z" fill="#EE9D24"/>
      <path d="M40.5647 104.54L39.4924 95.3217L41.09 95.6852L41.7761 102.461L45.4351 96.6738L46.5849 96.9354L47.3122 103.809L50.942 97.9267L52.4549 98.2709L47.4757 106.112L46.1927 105.821L45.4279 99.1671L41.8477 104.832L40.5647 104.54Z" fill="#EE9D24"/>
      <path d="M55.6211 107.006L59.0691 98.0414L60.3703 97.9662L64.8282 106.474L63.2173 106.567L62.2331 104.597L57.9703 104.844L57.232 106.913L55.6211 107.006ZM59.8007 99.7274L58.4425 103.548L61.6148 103.365L59.8254 99.7259L59.8007 99.7274Z" fill="#EE9D24"/>
      <path d="M70.7794 105.232L68.5925 96.7592L70.1309 96.3622L72.3177 104.835L70.7794 105.232Z" fill="#EE9D24"/>
      <path d="M80.8535 101.846L77.739 95.1086L75.0124 96.3689L74.4551 95.1634L81.3506 91.976L81.9078 93.1816L79.1812 94.4419L82.2957 101.18L80.8535 101.846Z" fill="#EE9D24"/>
      <path d="M90.1513 96.7699L84.9094 89.7628L86.1817 88.8111L90.6131 94.7348L93.9725 92.2217L94.783 93.3051L90.1513 96.7699Z" fill="#EE9D24"/>
      <path d="M99.1855 89.1538L92.8145 83.1549L93.9037 81.9982L100.275 87.9971L99.1855 89.1538Z" fill="#EE9D24"/>
      <path d="M106.495 80.2215C106.122 80.7979 105.702 81.2854 105.237 81.684C104.765 82.078 104.29 82.362 103.813 82.5358L103.024 81.4478C103.487 81.265 103.915 81.015 104.308 80.6977C104.706 80.3734 105.06 79.9717 105.37 79.4925C105.726 78.9439 105.894 78.4861 105.876 78.1191C105.85 77.7476 105.691 77.4673 105.4 77.2783C105.157 77.1209 104.907 77.0874 104.651 77.178C104.4 77.2616 104.09 77.4894 103.72 77.8615L102.738 78.8521C101.615 79.9778 100.522 80.1963 99.459 79.5079C99.0006 79.2109 98.6801 78.8306 98.4973 78.3671C98.3145 77.9036 98.2688 77.3957 98.3603 76.8437C98.4517 76.2916 98.6797 75.7343 99.0442 75.1718C99.3682 74.6718 99.7483 74.2525 100.185 73.914C100.614 73.571 101.058 73.3414 101.518 73.2252L102.255 74.2794C101.395 74.5408 100.698 75.0848 100.162 75.9112C99.852 76.3904 99.7097 76.8306 99.7356 77.232C99.7615 77.6333 99.9377 77.9397 100.264 78.1512C100.514 78.3132 100.769 78.3603 101.03 78.2926C101.284 78.2205 101.583 78.01 101.927 77.6612L102.903 76.681C103.494 76.0879 104.054 75.726 104.582 75.5951C105.115 75.4573 105.642 75.5572 106.163 75.8946C106.601 76.1781 106.91 76.5459 107.09 76.998C107.27 77.4501 107.313 77.9557 107.217 78.5147C107.118 79.0622 106.878 79.6312 106.495 80.2215Z" fill="#EE9D24"/>
      <path d="M111.815 69.682L104.864 67.0781L103.81 69.891L102.567 69.4251L105.232 62.3114L106.475 62.7773L105.422 65.5903L112.373 68.1941L111.815 69.682Z" fill="#EE9D24"/>
      </svg>`;
    } else {
      btn.disabled = true;
      btn.innerHTML = `<svg width="85" height="85"
      viewBox="0 0 85 85" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="42.5" cy="42.5" r="42.5" fill="#EE98" />
      <path
          d="M60.8123 54.1876H57.0623V50.4376C57.0623 50.2314 56.8936 50.0626 56.6873 50.0626H54.4373C54.2311 50.0626 54.0623 50.2314 54.0623 50.4376V54.1876H50.3123C50.1061 54.1876 49.9373 54.3564 49.9373 54.5626V56.8126C49.9373 57.0189 50.1061 57.1876 50.3123 57.1876H54.0623V60.9376C54.0623 61.1439 54.2311 61.3126 54.4373 61.3126H56.6873C56.8936 61.3126 57.0623 61.1439 57.0623 60.9376V57.1876H60.8123C61.0186 57.1876 61.1873 57.0189 61.1873 56.8126V54.5626C61.1873 54.3564 61.0186 54.1876 60.8123 54.1876ZM36.5076 41.3626C36.4654 40.9548 36.442 40.5423 36.442 40.1251C36.442 39.3798 36.5123 38.6532 36.6436 37.9454C36.6764 37.7767 36.5873 37.6032 36.4326 37.5329C35.7951 37.247 35.2092 36.8532 34.7029 36.3564C34.1064 35.778 33.637 35.0816 33.3247 34.3116C33.0123 33.5416 32.8639 32.715 32.8889 31.8845C32.9311 30.3798 33.5358 28.9501 34.5904 27.872C35.7483 26.6861 37.3045 26.0392 38.9592 26.0579C40.4545 26.072 41.8983 26.6486 42.9904 27.6704C43.3608 28.0173 43.6795 28.4017 43.9467 28.8142C44.0404 28.9595 44.2233 29.0204 44.3826 28.9642C45.2076 28.6782 46.0795 28.4767 46.9748 28.3829C47.2373 28.3548 47.3873 28.0736 47.2701 27.8392C45.7467 24.8251 42.6342 22.7439 39.0342 22.6876C33.8404 22.6079 29.5092 26.8689 29.5092 32.0626C29.5092 35.0064 30.8639 37.6314 32.9873 39.3517C31.4967 40.0407 30.1233 40.9923 28.9326 42.1829C26.3639 44.747 24.9108 48.1314 24.817 51.7454C24.8158 51.7955 24.8245 51.8452 24.8428 51.8918C24.8611 51.9384 24.8885 51.9809 24.9235 52.0167C24.9584 52.0525 25.0002 52.081 25.0463 52.1004C25.0924 52.1198 25.142 52.1298 25.192 52.1298H27.8217C28.0233 52.1298 28.192 51.9704 28.1967 51.7689C28.2858 49.0501 29.3873 46.5048 31.3233 44.5736C32.7014 43.1954 34.3889 42.2392 36.2311 41.7751C36.4092 41.7236 36.5311 41.5501 36.5076 41.3626ZM57.6248 40.1251C57.6248 34.997 53.5045 30.8298 48.3951 30.7501C43.2014 30.6704 38.8748 34.9314 38.8748 40.1251C38.8748 43.0689 40.2342 45.6939 42.3529 47.4142C40.8469 48.1123 39.4759 49.0708 38.3029 50.2454C35.7342 52.8095 34.2811 56.1939 34.1873 59.8032C34.1861 59.8533 34.1948 59.903 34.2131 59.9496C34.2314 59.9962 34.2588 60.0387 34.2938 60.0745C34.3287 60.1103 34.3705 60.1388 34.4166 60.1582C34.4627 60.1776 34.5123 60.1876 34.5623 60.1876H37.1873C37.3889 60.1876 37.5576 60.0282 37.5623 59.8267C37.6514 57.1079 38.7529 54.5626 40.6889 52.6314C42.7092 50.6111 45.3904 49.5001 48.2498 49.5001C53.4248 49.5001 57.6248 45.3048 57.6248 40.1251ZM52.492 44.3673C51.3576 45.5017 49.8529 46.1251 48.2498 46.1251C46.6467 46.1251 45.142 45.5017 44.0076 44.3673C43.4416 43.8042 42.9943 43.1332 42.6924 42.394C42.3904 41.6548 42.2399 40.8626 42.2498 40.0642C42.2639 38.5267 42.8779 37.0407 43.9514 35.9392C45.0764 34.7861 46.5811 34.1439 48.1889 34.1251C49.7779 34.1111 51.3201 34.7298 52.4545 35.8407C53.617 36.9798 54.2545 38.5032 54.2545 40.1251C54.2498 41.7282 53.6264 43.2329 52.492 44.3673Z"
          fill="white" />
  </svg>`;
    }
  });
}

function showMessage() {
  const input = document.querySelector('.message-area');
  const btn = document.querySelector('.message-btn');
  let nameInput = document.getElementById('message-name');
  let SenderInput = document.getElementById('sender-email');

  input.addEventListener('input', function () {
    if (input.value.trim() !== "" && nameInput.value.trim() !== "" && SenderInput.value.trim() !== "") {
      btn.disabled = false;
      btn.innerHTML = `<svg class="hover" xmlns="http://www.w3.org/2000/svg" width="118" height="109" viewBox="0 0 118 109" fill="none">
    <path d="M5.21098 69.8391C4.91362 69.2229 4.7157 68.6137 4.61722 68.0113C4.52618 67.4054 4.53022 66.8543 4.62935 66.358L5.96365 66.2495C5.87937 66.7386 5.8706 67.2326 5.93735 67.7312C6.00767 68.2373 6.16644 68.7465 6.41365 69.2587C6.69669 69.8452 6.99921 70.2255 7.3212 70.3996C7.65063 70.5701 7.97124 70.5802 8.28304 70.4297C8.54288 70.3043 8.70046 70.1092 8.75579 69.8446C8.8147 69.5873 8.78134 69.2053 8.65572 68.6984L8.32069 67.3499C7.9441 65.8109 8.32372 64.7673 9.45958 64.2191C9.94955 63.9827 10.4391 63.9066 10.9283 63.9909C11.4175 64.0751 11.8733 64.2991 12.2959 64.6626C12.7185 65.0262 13.0749 65.5086 13.3651 66.1099C13.623 66.6444 13.7832 67.185 13.8456 67.7315C13.9154 68.2744 13.8808 68.7717 13.7417 69.2232L12.4631 69.3048C12.6854 68.4378 12.5834 67.5626 12.157 66.6792C11.9098 66.1669 11.6087 65.818 11.2537 65.6324C10.8987 65.4467 10.5467 65.4381 10.1978 65.6065C9.93051 65.7355 9.75821 65.9285 9.68087 66.1855C9.61095 66.4389 9.63535 66.8024 9.75406 67.2759L10.0837 68.6134C10.2825 69.4236 10.3008 70.0874 10.1387 70.605C9.98022 71.13 9.62257 71.5269 9.06578 71.7956C8.59807 72.0213 8.12514 72.0939 7.64698 72.0135C7.16882 71.933 6.71666 71.7073 6.29051 71.3363C5.87536 70.9692 5.51552 70.4701 5.21098 69.8391Z" fill="#EE9D24"/>
    <path d="M8.13362 76.9737L15.5582 72.4059L18.5969 77.3451L17.5227 78.0059L15.2809 74.3621L13.2379 75.6191L15.3371 79.0312L14.2629 79.6921L12.1637 76.28L10.0048 77.6082L12.2466 81.252L11.1724 81.9129L8.13362 76.9737Z" fill="#EE9D24"/>
    <path d="M14.4904 86.3497L20.9888 80.5394L21.78 81.4242L20.3686 88.9726L24.9036 84.9177L25.8843 86.0146L19.386 91.8249L18.603 90.9493L20.0246 83.3752L15.4712 87.4466L14.4904 86.3497Z" fill="#EE9D24"/>
    <path d="M23.9569 94.6158L29.1952 87.648L31.7846 89.5947C32.9508 90.4715 33.6248 91.4475 33.8066 92.5226C33.995 93.6026 33.6681 94.7027 32.826 95.8228C31.9889 96.9364 31.0229 97.556 29.9281 97.6817C28.8398 97.8123 27.7126 97.4392 26.5463 96.5625L23.9569 94.6158ZM26.0096 94.5192L27.2549 95.4554C28.8625 96.664 30.2781 96.4546 31.5016 94.8272C32.7202 93.2063 32.5256 91.7916 30.918 90.5829L29.6727 89.6467L26.0096 94.5192Z" fill="#EE9D24"/>
    <path d="M45.1274 103.699L46.2183 95.0505L47.531 95.2161L49.8845 101.258L53.6525 95.9882L54.9406 96.1507L53.8497 104.799L52.4266 104.62L53.1616 98.7927L50.1142 102.995L49.1941 102.879L47.2824 98.0761L46.5505 103.879L45.1274 103.699Z" fill="#EE9D24"/>
    <path d="M61.0271 104.783L60.2223 96.103L65.9966 95.5676L66.1131 96.8234L61.8531 97.2184L62.0746 99.6069L66.0637 99.2371L66.1801 100.493L62.191 100.863L62.425 103.387L66.685 102.992L66.8014 104.248L61.0271 104.783Z" fill="#EE9D24"/>
    <path d="M75.6469 102.408C74.9901 102.6 74.3565 102.695 73.7462 102.692C73.1336 102.682 72.5907 102.587 72.1175 102.408L72.2305 101.074C72.6991 101.238 73.1848 101.328 73.6876 101.344C74.1984 101.358 74.7268 101.286 75.2728 101.126C75.8979 100.944 76.3229 100.708 76.5477 100.419C76.7702 100.122 76.833 99.8079 76.736 99.4755C76.6551 99.1986 76.4888 99.011 76.2368 98.9128C75.9928 98.8122 75.6105 98.7821 75.0899 98.8225L73.7045 98.9305C72.1245 99.0482 71.1578 98.5016 70.8045 97.2909C70.6521 96.7687 70.6577 96.2733 70.8215 95.8047C70.9853 95.3361 71.2814 94.9234 71.7096 94.5666C72.1379 94.2097 72.6725 93.9378 73.3134 93.7507C73.8832 93.5844 74.4427 93.5156 74.992 93.5442C75.5391 93.5649 76.0238 93.681 76.4462 93.8926L76.3158 95.1672C75.4974 94.805 74.6173 94.7613 73.6757 95.0361C73.1297 95.1955 72.7359 95.4349 72.4942 95.7545C72.2526 96.074 72.1861 96.4197 72.2946 96.7916C72.3777 97.0765 72.5397 97.2783 72.7804 97.3969C73.0188 97.5077 73.3813 97.5436 73.868 97.5046L75.2415 97.4C76.0734 97.3375 76.7312 97.4289 77.2149 97.6742C77.7066 97.9171 78.039 98.3353 78.2122 98.9288C78.3577 99.4273 78.3514 99.9057 78.1932 100.364C78.035 100.822 77.7378 101.231 77.3016 101.59C76.8711 101.939 76.3195 102.212 75.6469 102.408Z" fill="#EE9D24"/>
    <path d="M88.0129 97.2952C87.4531 97.6886 86.884 97.9826 86.3056 98.1775C85.7224 98.3656 85.178 98.451 84.6721 98.4336L84.3487 97.1346C84.8451 97.1384 85.3339 97.067 85.8151 96.9203C86.3031 96.7688 86.7798 96.5296 87.2451 96.2026C87.778 95.8282 88.1042 95.468 88.2238 95.122C88.3386 94.7693 88.2965 94.4513 88.0975 94.168C87.9316 93.932 87.7136 93.8081 87.4435 93.7964C87.1801 93.78 86.8085 93.8749 86.3287 94.081L85.0523 94.6303C83.5948 95.2515 82.5034 95.0461 81.7784 94.0141C81.4656 93.569 81.3111 93.0982 81.315 92.6019C81.3188 92.1055 81.4658 91.6194 81.756 91.1434C82.0463 90.6675 82.4645 90.2376 83.0108 89.8537C83.4965 89.5125 84.0039 89.2668 84.533 89.1166C85.0575 88.9597 85.5537 88.9133 86.0218 88.9773L86.3097 90.2257C85.4182 90.1469 84.5711 90.3895 83.7685 90.9535C83.3031 91.2805 83.0076 91.6342 82.882 92.0146C82.7564 92.395 82.8049 92.7437 83.0277 93.0607C83.1983 93.3036 83.4167 93.4423 83.6828 93.4769C83.9442 93.5048 84.2989 93.4218 84.747 93.2279L86.0132 92.6857C86.7805 92.3582 87.4326 92.2324 87.9696 92.3085C88.5134 92.3798 88.9629 92.6683 89.3184 93.1742C89.6169 93.5991 89.7653 94.054 89.7635 94.5389C89.7616 95.0237 89.6122 95.5065 89.3153 95.9872C89.0203 96.4564 88.5862 96.8924 88.0129 97.2952Z" fill="#EE9D24"/>
    <path d="M94.9455 92.3152L91.2292 83.4984L92.1113 82.5458L101.187 85.5743L100.095 86.7537L98.0284 86.0194L95.1385 89.1404L96.0377 91.1358L94.9455 92.3152ZM92.9188 84.2034L94.5827 87.8843L96.7334 85.5617L92.9356 84.1853L92.9188 84.2034Z" fill="#EE9D24"/>
    <path d="M106.557 78.0646C106.041 78.8798 105.452 79.4727 104.789 79.8433C104.13 80.207 103.425 80.3568 102.676 80.2927C101.927 80.2286 101.165 79.9521 100.392 79.4632C99.6114 78.9699 99.0337 78.3951 98.6587 77.7387C98.2767 77.078 98.1108 76.3685 98.161 75.6103C98.2042 74.8477 98.4746 74.0727 98.9723 73.2853C99.2982 72.7697 99.6809 72.3339 100.121 71.9779C100.553 71.6174 100.997 71.3711 101.451 71.2388L102.212 72.3489C101.747 72.5134 101.351 72.7312 101.024 73.0022C100.696 73.2731 100.403 73.6141 100.143 74.0253C99.6496 74.8057 99.5017 75.5411 99.6992 76.2315C99.901 76.915 100.427 77.5253 101.277 78.0627C102.134 78.6044 102.916 78.8106 103.621 78.6814C104.327 78.5522 104.936 78.0834 105.446 77.2751C105.592 77.0452 105.722 76.8008 105.837 76.5418C105.949 76.2715 106.042 75.9937 106.115 75.7083L104.401 74.6249L103.331 76.3181L102.338 75.6905L104.115 72.8789L107.658 75.1185C107.609 75.5656 107.486 76.0534 107.289 76.582C107.091 77.1105 106.847 77.6047 106.557 78.0646Z" fill="#EE9D24"/>
    <path d="M110.032 70.3524L102.491 65.979L105.4 60.9626L106.491 61.5953L104.345 65.2962L106.42 66.4996L108.43 63.0341L109.521 63.6668L107.511 67.1323L109.704 68.404L111.85 64.7031L112.941 65.3359L110.032 70.3524Z" fill="#EE9D24"/>
    <circle cx="58.5" cy="42.5" r="42.5" fill="#EE9D24"/>
    <path d="M73.5645 28.435C73.3621 28.2335 73.1063 28.094 72.8273 28.0329C72.5483 27.9718 72.2576 27.9916 71.9895 28.09L38.9895 40.09C38.7049 40.198 38.4599 40.3899 38.287 40.6405C38.1141 40.891 38.0215 41.1881 38.0215 41.4925C38.0215 41.7969 38.1141 42.0941 38.287 42.3446C38.4599 42.5951 38.7049 42.7871 38.9895 42.895L53.3895 48.655L59.1495 63.055C59.2577 63.3271 59.4432 63.5616 59.6831 63.7295C59.923 63.8974 60.2068 63.9915 60.4995 64C60.8026 63.9938 61.0968 63.8959 61.3431 63.7191C61.5895 63.5424 61.7765 63.2952 61.8795 63.01L73.8795 30.01C73.9817 29.7446 74.0064 29.4557 73.9506 29.1768C73.8948 28.8979 73.7609 28.6407 73.5645 28.435ZM60.4995 58.3L56.3145 47.8L63.4995 40.615L61.3845 38.5L54.1395 45.745L43.6995 41.5L69.9945 32.005L60.4995 58.3Z" fill="white"/>
    </svg>`;
    } else {
      btn.disabled = true;
      btn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="85"
      height="85" viewBox="0 0 85 85" fill="none">
      <circle cx="42.5" cy="42.5" r="42.5" fill="#EE98" />
      <path
          d="M59.565 24.4349C59.3626 24.2334 59.1068 24.0939 58.8278 24.0328C58.5488 23.9717 58.2581 23.9915 57.99 24.0899L24.99 36.0899C24.7054 36.1978 24.4604 36.3898 24.2875 36.6403C24.1146 36.8908 24.022 37.188 24.022 37.4924C24.022 37.7968 24.1146 38.094 24.2875 38.3445C24.4604 38.595 24.7054 38.787 24.99 38.8949L39.39 44.6549L45.15 59.0549C45.2582 59.327 45.4437 59.5615 45.6836 59.7294C45.9235 59.8973 46.2073 59.9913 46.5 59.9999C46.8031 59.9937 47.0973 59.8958 47.3436 59.719C47.59 59.5423 47.777 59.2951 47.88 59.0099L59.88 26.0099C59.9822 25.7445 60.0068 25.4555 59.9511 25.1767C59.8953 24.8978 59.7614 24.6406 59.565 24.4349V24.4349ZM46.5 54.2999L42.315 43.7999L49.5 36.6149L47.385 34.4999L40.14 41.7449L29.7 37.4999L55.995 28.0049L46.5 54.2999Z"
          fill="white" />
  </svg>`;
    }
  })
}

function showEvent() {
  let input = document.querySelector('.event-area');
  let btn = document.querySelector('.event-btn');

  input.addEventListener('input', function () {
    if (input.value.trim() !== "" || input.value !== null) {
      btn.disabled = false;
      btn.innerHTML = `<svg class="hover" xmlns="http://www.w3.org/2000/svg" width="113" height="110" viewBox="0 0 113 110" fill="none">
  <circle cx="56.5" cy="42.5" r="42.5" fill="#EE9D24"/>
  <path d="M75.2465 31.9498C75.2465 29.3971 74.2324 26.949 72.4274 25.1439C70.6224 23.3389 68.1742 22.3248 65.6215 22.3248C63.0688 22.3248 60.6206 23.3389 58.8156 25.1439C57.0106 26.949 55.9965 29.3971 55.9965 31.9498C55.9965 34.5025 57.0106 36.9507 58.8156 38.7557C60.6206 40.5608 63.0688 41.5748 65.6215 41.5748C68.1742 41.5748 70.6224 40.5608 72.4274 38.7557C74.2324 36.9507 75.2465 34.5025 75.2465 31.9498ZM66.4965 32.8248V37.2068C66.4965 37.4389 66.4043 37.6615 66.2402 37.8255C66.0761 37.9896 65.8536 38.0818 65.6215 38.0818C65.3894 38.0818 65.1669 37.9896 65.0028 37.8255C64.8387 37.6615 64.7465 37.4389 64.7465 37.2068V32.8248H60.3628C60.1307 32.8248 59.9081 32.7326 59.744 32.5685C59.5799 32.4045 59.4878 32.1819 59.4878 31.9498C59.4878 31.7178 59.5799 31.4952 59.744 31.3311C59.9081 31.167 60.1307 31.0748 60.3628 31.0748H64.7465V26.6998C64.7465 26.4678 64.7465 26.0701 64.7465 25.8248C65.1875 25.8248 65.3894 25.8248 65.6215 25.8248C65.8536 25.8248 66.4966 25.8248 66.4966 25.8248C66.4966 26.2623 66.4965 26.4678 66.4965 26.6998V31.0748H70.8645C71.0966 31.0748 71.3191 31.167 71.4832 31.3311C71.6473 31.4952 71.7395 31.7178 71.7395 31.9498C71.7395 32.1819 71.6473 32.4045 71.4832 32.5685C71.3191 32.7326 71.0966 32.8248 70.8645 32.8248H66.4965ZM65.6215 55.1933V43.3248C66.5053 43.3253 67.3862 43.2232 68.2465 43.0203V57.7553C68.2462 57.9967 68.1794 58.2334 68.0533 58.4393C67.9273 58.6452 67.7469 58.8123 67.532 58.9223C67.3171 59.0323 67.076 59.0808 66.8353 59.0627C66.5945 59.0445 66.3635 58.9603 66.1675 58.8193L56 51.5026L45.829 58.8176C45.633 58.9586 45.402 59.0428 45.1612 59.0609C44.9205 59.0791 44.6794 59.0305 44.4645 58.9205C44.2496 58.8105 44.0692 58.6434 43.9432 58.4375C43.8171 58.2317 43.7503 57.995 43.75 57.7536V31.5123C43.75 30.0039 44.3492 28.5573 45.4158 27.4907C46.4824 26.424 47.9291 25.8248 49.4375 25.8248H56.035C55.5104 26.6429 55.0934 27.5252 54.7942 28.4498H49.4375C48.6253 28.4498 47.8463 28.7725 47.272 29.3468C46.6977 29.9211 46.375 30.7001 46.375 31.5123V55.1951L55.2317 48.8216C55.455 48.6609 55.7232 48.5745 55.9983 48.5745C56.2733 48.5745 56.5415 48.6609 56.7648 48.8216L65.6215 55.1951V55.1933Z" fill="white"/>
  <path d="M4.1692 73.1024L14.1797 71.4578L14.943 72.6034L9.57027 81.2086L8.62526 79.7903L9.89476 77.8417L7.39413 74.0886L5.1142 74.5207L4.1692 73.1024ZM13.034 73.0247L8.82681 73.8272L10.6877 76.6201L13.0485 73.0465L13.034 73.0247Z" fill="#EE9D24"/>
  <path d="M13.8197 86.3802L19.3589 78.9814L22.1086 81.0399C23.3469 81.9671 24.0636 83.0004 24.2586 84.1399C24.4606 85.2847 24.1164 86.4518 23.2259 87.6412C22.3407 88.8236 21.3178 89.4826 20.1572 89.6182C19.0037 89.759 17.8077 89.3659 16.5693 88.4387L13.8197 86.3802ZM15.9959 86.2734L17.3182 87.2634C19.0253 88.5415 20.5258 88.3165 21.8196 86.5884C23.1082 84.8672 22.8989 83.3676 21.1917 82.0895L19.8694 81.0995L15.9959 86.2734Z" fill="#EE9D24"/>
  <path d="M25.0371 95.1548L29.5714 87.101L32.5645 88.7861C33.9125 89.545 34.757 90.4768 35.0979 91.5815C35.4465 92.6905 35.2563 93.8923 34.5274 95.187C33.8027 96.4741 32.8738 97.26 31.7406 97.5448C30.615 97.8338 29.3782 97.5989 28.0301 96.8399L25.0371 95.1548ZM27.1811 94.7672L28.6205 95.5775C30.4788 96.6238 31.9375 96.2063 32.9966 94.3252C34.0514 92.4517 33.6496 90.9918 31.7913 89.9456L30.3519 89.1352L27.1811 94.7672Z" fill="#EE9D24"/>
  <path d="M47.0217 103.687L48.028 94.4992L54.14 95.1686L53.9944 96.4979L49.4853 96.004L49.2084 98.5322L53.4308 98.9947L53.2852 100.324L49.0628 99.8615L48.7702 102.533L53.2793 103.027L53.1337 104.356L47.0217 103.687Z" fill="#EE9D24"/>
  <path d="M62.3398 104.175L57.361 95.3667L59.1489 95.1956L62.8657 101.965L65.2304 94.6133L66.9531 94.4483L63.7362 104.041L62.3398 104.175Z" fill="#EE9D24"/>
  <path d="M73.3628 102.358L70.6314 93.5281L76.5054 91.7111L76.9006 92.9886L72.5671 94.3291L73.3187 96.7588L77.3767 95.5036L77.7718 96.7811L73.7139 98.0363L74.5081 100.604L78.8416 99.2633L79.2368 100.541L73.3628 102.358Z" fill="#EE9D24"/>
  <path d="M85.1659 97.4529L80.0979 89.7238L81.1504 89.0337L88.8423 91.7031L85.3055 86.3091L86.6101 85.4537L91.6782 93.1828L90.6367 93.8657L82.9193 91.1816L86.4706 96.5975L85.1659 97.4529Z" fill="#EE9D24"/>
  <path d="M98.8029 86.9644L93.2023 81.4785L90.9822 83.7449L89.9801 82.7633L95.5945 77.0316L96.5966 78.0132L94.3765 80.2797L99.9772 85.7656L98.8029 86.9644Z" fill="#EE9D24"/>
  <path d="M106.276 74.9797C105.896 75.5973 105.464 76.122 104.983 76.554C104.493 76.9814 103.999 77.2926 103.499 77.4875L102.64 76.3575C103.125 76.1534 103.571 75.8792 103.978 75.5347C104.39 75.1829 104.754 74.7502 105.071 74.2368C105.433 73.649 105.6 73.1616 105.572 72.7745C105.536 72.3829 105.362 72.0907 105.049 71.8981C104.789 71.7376 104.525 71.7083 104.257 71.81C103.993 71.9043 103.671 72.1523 103.29 72.554L102.277 73.6235C101.117 74.8389 99.9678 75.0958 98.8294 74.3942C98.3383 74.0916 97.9907 73.6977 97.7866 73.2126C97.5825 72.7275 97.5222 72.1924 97.6056 71.6073C97.689 71.0222 97.9164 70.4283 98.2878 69.8256C98.618 69.2899 99.0094 68.8381 99.4619 68.4702C99.9071 68.0977 100.371 67.8447 100.854 67.711L101.657 68.8066C100.756 69.1032 100.032 69.6942 99.4863 70.5796C99.1699 71.093 99.0302 71.5613 99.0671 71.9844C99.1041 72.4076 99.2974 72.7269 99.6471 72.9424C99.915 73.1075 100.186 73.1512 100.46 73.0735C100.726 72.9912 101.037 72.7618 101.392 72.3853L102.398 71.327C103.008 70.6867 103.591 70.2911 104.146 70.1403C104.705 69.9821 105.264 70.0749 105.822 70.4188C106.291 70.7077 106.626 71.0887 106.827 71.5618C107.029 72.0348 107.085 72.5677 106.997 73.1602C106.906 73.7408 106.666 74.3472 106.276 74.9797Z" fill="#EE9D24"/>
  </svg>`;
    } else {
      btn.disabled = true;
      btn.innerHTML = `<svg width="85" height="85" viewBox="0 0 85 85" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="42.5" cy="42.5" r="42.5" fill="#EE98" />
      <path
          d="M63.996 30.5142C63.996 27.5968 62.8371 24.7989 60.7742 22.736C58.7113 20.6731 55.9134 19.5142 52.996 19.5142C50.0786 19.5142 47.2807 20.6731 45.2178 22.736C43.1549 24.7989 41.996 27.5968 41.996 30.5142C41.996 33.4315 43.1549 36.2294 45.2178 38.2923C47.2807 40.3552 50.0786 41.5142 52.996 41.5142C55.9134 41.5142 58.7113 40.3552 60.7742 38.2923C62.8371 36.2294 63.996 33.4315 63.996 30.5142ZM53.996 31.5142V36.5222C53.996 36.7874 53.8906 37.0417 53.7031 37.2293C53.5156 37.4168 53.2612 37.5222 52.996 37.5222C52.7308 37.5222 52.4764 37.4168 52.2889 37.2293C52.1014 37.0417 51.996 36.7874 51.996 36.5222V31.5142H46.986C46.7208 31.5142 46.4664 31.4088 46.2789 31.2213C46.0914 31.0337 45.986 30.7794 45.986 30.5142C45.986 30.2489 46.0914 29.9946 46.2789 29.8071C46.4664 29.6195 46.7208 29.5142 46.986 29.5142H51.996V24.5142C51.996 24.2489 51.996 23.7944 51.996 23.5142C52.5 23.5142 52.7308 23.5142 52.996 23.5142C53.2612 23.5142 53.9961 23.5142 53.9961 23.5142C53.9961 24.0142 53.996 24.2489 53.996 24.5142V29.5142H58.988C59.2532 29.5142 59.5076 29.6195 59.6951 29.8071C59.8826 29.9946 59.988 30.2489 59.988 30.5142C59.988 30.7794 59.8826 31.0337 59.6951 31.2213C59.5076 31.4088 59.2532 31.5142 58.988 31.5142H53.996ZM52.996 57.0782V43.5142C54.0061 43.5147 55.0129 43.398 55.996 43.1662V60.0062C55.9957 60.2821 55.9193 60.5525 55.7752 60.7878C55.6312 61.0231 55.425 61.2141 55.1794 61.3398C54.9338 61.4655 54.6583 61.521 54.3831 61.5003C54.108 61.4795 53.844 61.3833 53.62 61.2222L42 52.8602L30.376 61.2202C30.152 61.3813 29.888 61.4775 29.6129 61.4983C29.3377 61.519 29.0622 61.4635 28.8166 61.3378C28.571 61.2121 28.3648 61.0211 28.2208 60.7858C28.0767 60.5505 28.0003 60.2801 28 60.0042V30.0142C28 28.2903 28.6848 26.637 29.9038 25.418C31.1228 24.199 32.7761 23.5142 34.5 23.5142H42.04C41.4405 24.4491 40.9639 25.4574 40.622 26.5142H34.5C33.5717 26.5142 32.6815 26.8829 32.0251 27.5393C31.3687 28.1957 31 29.0859 31 30.0142V57.0802L41.122 49.7962C41.3772 49.6126 41.6836 49.5138 41.998 49.5138C42.3124 49.5138 42.6188 49.6126 42.874 49.7962L52.996 57.0802V57.0782Z"
          fill="white" /></svg>`;
    }
  })
}

const elements = document.querySelectorAll(".scrollbx");

const onScroll = () => {
  const middleOfScreen = window.innerHeight / 2;
  
  elements.forEach((element) => {
    const { top } = element.getBoundingClientRect();

    if (window.innerWidth <= 600 && Math.abs(top - middleOfScreen) < element.offsetHeight / 2) {
      element.style.filter = "none";
    } else if(window.innerWidth >= 600){
      element.style.filter = "";
    } else {
      element.style.filter = "grayscale(100%)";
    }
    // element.style.filter = window.innerWidth <= 600 && top <= middleOfScreen ? "none" : "grayscale(100%)";
  });
};

window.addEventListener("scroll", onScroll);



// this is the code for the multiple select area

class CustomSelect {
  constructor(originalSelect) {
    this.originalSelect = originalSelect
    this.customSelect = document.createElement('div')
    this.customSelect.classList.add('select')
    this.originalSelect.querySelectorAll("option").forEach(option => {
      const item = document.createElement('div')
      item.classList.add('selectitem')
      item.textContent = option.textContent
      this.customSelect.appendChild(item)
      item.addEventListener("click", () => {
        if (item.classList.contains("selected")) { this._deselect(item) }
        else { this._select(item) }
      })
    })
    this.originalSelect.insertAdjacentElement('afterend', this.customSelect)
    this.originalSelect.style.display = "none"
  }
  _select(item) {
    const index = Array.from(this.customSelect.children).indexOf(item)
    this.originalSelect.querySelectorAll('option')[index].selected = true
    item.classList.add("selected")
  }
  _deselect(item) {
    const index = Array.from(this.customSelect.children).indexOf(item)
    this.originalSelect.querySelectorAll('option')[index].selected = false
    item.classList.remove("selected")
  }
}
document.querySelectorAll('.customselect').forEach(selectelement => { new CustomSelect(selectelement) });

//  this is for the effect on the active link on  event bar
const eventatt = document.getElementById("navatt")
const eventhost = document.getElementById("navhost")
let activePage = window.location.pathname
const navLinks = [eventatt, eventhost].forEach(link => { if (link.href.includes(`${activePage}`)) { link.classList.add("active") } })
console.log(activePage)

// this for the modal

// this for the first modal 
const menu = document.getElementById('menu')
const modal = document.querySelector('.modal')
const clmenu = document.getElementById('closebtn')
menu.addEventListener('click', () => { modal.showModal() })
clmenu.addEventListener('click', () => { modal.close() })
// this is for the second modal
const menu2 = document.getElementById('menu2')
const menu_2 = document.getElementById('menu_2')
const clmenu2 = document.getElementById('closebtn2')
const modal2 = document.querySelector('.modal2')
menu2.addEventListener('click', () => { modal2.showModal() })
menu_2.addEventListener('click', () => { modal2.showModal() })
clmenu2.addEventListener('click', () => { modal2.close() })
// this is the third modal in the page
const menu3 = document.querySelector('.menu3')
const modal3 = document.querySelector('.modal3')
const clmenu3 = document.getElementById('closebtn3')
menu3.addEventListener('click', () => { modal3.showModal() })
clmenu3.addEventListener('click', () => { modal3.close() })

// this is for the fourth modal
const menu4 = document.getElementById('menu4')
const menu_4 = document.getElementById('menu_4')
const modal4 = document.querySelector('.modal4')
const clmenu4 = document.getElementById('closebtn4')
menu4.addEventListener('click', () => { modal4.showModal() })
menu_4.addEventListener('click', () => { modal4.showModal() })
clmenu4.addEventListener('click', () => { modal4.close() })

// this is the slide show

const sShow = document.getElementById('sShow')
const menu5 = document.querySelector('.menu5')
const menu6 = document.querySelector('.menu6')
const menu7 = document.querySelector('.menu7')
const clmenu5 = document.getElementById('closebtn5')
menu5.addEventListener('click', () => { sShow.showModal() })
menu6.addEventListener('click', () => { sShow.showModal() })
menu7.addEventListener('click', () => { sShow.showModal() })
clmenu5.addEventListener('click', () => { sShow.close() })
// this is the code for the slide show
let slideIndex = 1;
showSlides(slideIndex);

// Next/previous controls
function plusSlides(n) {
  showSlides(slideIndex += n);
}

// Thumbnail image controls
function currentSlide(n) {
  showSlides(slideIndex = n);
}

function showSlides(n) {
  let i;
  let slides = document.querySelectorAll(".mySlides");
  let dots = document.getElementsByClassName("dot");
  if (n > slides.length) { slideIndex = 1 }
  if (n < 1) { slideIndex = slides.length }
  for (i = 0; i < slides.length; i++) {
    slides[i].style.display = "none";
  }
  for (i = 0; i < dots.length; i++) {
    dots[i].className = dots[i].className.replace(" actives", "");
  }
  slides[slideIndex - 1].style.display = "block";
  dots[slideIndex - 1].className += " actives";
}
// // this is the slide show dragging

// Select the carousel container
const carouselContainer = document.querySelector('.slideshow-container');

let startX = 0;
let startY = 0;
let distX = 0;
let distY = 0;
let threshold = 100; // Minimum distance traveled to be considered a swipe
let restraint = 100; // Maximum amount of vertical movement allowed
let allowedTime = 300; // Maximum amount of time allowed to travel that distance
let elapsedTime = 0;
let startTime = 0;

// Add event listeners for touch and mouse events
carouselContainer.addEventListener('mousedown', (event) => {
  carouselContainer.style.cursor = "grab";
  startX = event.pageX;
  startY = event.pageY;
  startTime = new Date().getTime();
});

carouselContainer.addEventListener('mouseup', (event) => {
  carouselContainer.style.cursor = "auto";
  distX = event.pageX - startX;
  distY = event.pageY - startY;
  elapsedTime = new Date().getTime() - startTime;

  // Determine if swipe meets the threshold, restraint, and time requirements
  if ((distX >= 0 && distX >= threshold) || (distX < 0 && -distX >= threshold)) {
    if (distX < 0) {
      // alert('User swiped left');
      plusSlides(1);
      // Call your function for left swipe here
    } else {
      // alert('User swiped right');
      plusSlides(-1);
      // Call your function for right swipe here
    }
  }
});

carouselContainer.addEventListener('touchstart', (event) => {
  let touchObj = event.changedTouches[0];
  startX = touchObj.pageX;
  startY = touchObj.pageY;
  startTime = new Date().getTime();
});

carouselContainer.addEventListener('touchend', (event) => {
  let touchObj = event.changedTouches[0];
  distX = touchObj.pageX - startX;
  distY = touchObj.pageY - startY;
  elapsedTime = new Date().getTime() - startTime;

  // Determine if swipe meets the threshold, restraint, and time requirements
  if ((distX >= 0 && distX >= threshold) || (distX < 0 && -distX >= threshold)) {
    if (distX < 0) {
      // alert('User swiped left');
      plusSlides(1);
      // Call your function for left swipe here
    } else {
      // alert('User swiped right');
      plusSlides(-1);
      // Call your function for right swipe here
    }
  }
});


// this is a function too add the animate on scroll 
const observer = new IntersectionObserver(
  (entries) => { entries.forEach((entry) => { entry.isIntersecting ? entry.target.classList.add('show') : entry.target.classList.remove('show') }) })
const hiddenElements = document.querySelectorAll(".hiddenscroll")
hiddenElements.forEach((el) => observer.observe(el))
// this is the function for the animation too happen once
const oneobserver = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      // entry.isIntersecting?entry.target.classList.add('show')
      if (entry.isIntersecting) { entry.target.classList.add('show') }
    })
  })
const hiddenElements1 = document.querySelectorAll(".hiddenscroll1")
hiddenElements1.forEach((el) => oneobserver.observe(el))



//This is for the interactive mouse-following section

const scrollingDiv = document.querySelector('.scrolling-block')
const borderAreaCont = document.querySelector('.boderarea-container')

const Mousemove = (e) => {
  scrollingDiv.style.left = e.pageX + 'px';
  // scrollingDiv.style.
  scrollingDiv.style.opacity = '1';

}
const Mouseout = (e) => {
  scrollingDiv.style.left = e.pageX + 'px';
  // scrollingDiv.style.
  scrollingDiv.style.opacity = '0';

}
borderAreaCont.addEventListener('mousemove', Mousemove);

borderAreaCont.addEventListener('mouseout', Mouseout)



// // this is the form submission

// let cta = document.getElementById('cta');
// let email = document.getElementById('email');
// let error = document.getElementById('error');
// let sucess = document.getElementById('sucess');
// let signup = document.getElementById('cta');

// cta.addEventListener('click',(event)=>{
//  event.preventDefault
//  if ( this.email.value==null|| this.email.value==""){
//   error.classList.add('erroractive')

// }
// else{
//     let fecthData = {
//       method: 'POST',
//       body: JSON.stringify({email:this.email.value, js:true}),
//       headers: { "content-type": "application/json"}
//     }
//  fetch('/subscribe', fecthData)
//  .then(res=>{
//   if (res.ok){
//     //yay
//   }
//   else{
//     error.classList.add('erroractive')
//   }
//  })


//  }
// })


// this is the code for the FAB


const heroHeader = document.querySelector('.hero_header')
const articleHeader = document.querySelector('.article_header')
const fltBtn = document.querySelector('.heroBtn')


const moveBtn = (e) => {

  if (!e[0].isIntersecting) {
    fltBtn.classList.add('flt_btn')

  }
  if (e[0].isIntersecting) {
    fltBtn.classList.remove('flt_btn')
  }
}


const moveBtnObs = new IntersectionObserver(moveBtn)
moveBtnObs.observe(heroHeader)
moveBtnObs.observe(articleHeader)



